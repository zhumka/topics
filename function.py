''' Введение в функции'''
''' Аннотации -> помогают сделать код ирнформативным и
 избавить от некоторых проблем динамической типизации,
 никак не влияет на работу кода'''

# num: int = 10 предупредить какой тип данных нужно передавать, присваивать
# num = 'hello'
# print(num)

'''=============== Функции =============='''
#  Функция -> именованный блок кода ( есть имя), который выполняет одну задачу
#  Может принимать в себя аргументы и возвращать результат
#  Вызывается многократно по имени

# def -> ключевое слово для обьявления функции ( указывает тпитону, что мы
# хотим создать функцию)

'''Синтаксис'''
# def <название_функции>(параметры):
#     <методы функций>

# def my_len(obj):
#     count = 0
#     for i in obj:
#         count += 1
#     return count

# a = my_len([1,2,3,4,5])
# # print(a)


# def sum_(num1: int, num2:int):
#     res = num1 + num2
#     print(res)
#     return res

# a = sum_(2,3)
# print(a)
# sum_(4,'he')
# print(sum_(1,2))

# sum_()

'''return -> используется для возвращения результата,
который можно сохранить в переменной и где то изпользовать
после return функция завершает свою работу, если в функции не прописан 
return -> функция возвращает NONE'''

# num=[1,2,3,4,5,6,7,8,9,0]
# def min(num:list):
#     for i in num:
#         print(i)

'''========= параметры и аргументы ========='''
#параметры - локальные переменные внутри функции

# аргументы - значение которое мы задаем параметрам 

# def a(параметры):
#     pass
# a(аргументы)

'''========== виды параметров ==========='''

# 1. обязательные (a,b,list_) -> определяют какие аргументы нужно передать 
# 2. необязательные пармаетры 
# 2.1 с дефолтом (имеет значение по умолчанию)
# 2.2 args -> принимают (все) неименованный аргумент (tuple)
# 2.3 kwargs -> принимает (все) именованные аргументы (dict)

# def func(a='hello',*args,**kwargs):
#     print(a)
#     print(args)
#     print(kwargs)

# func(7,'hello')

'''=========== Виды аргументов ==========='''
# 1. позиционные 
# 2. именованные 

# Распаковка 
